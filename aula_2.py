# -*- coding: utf-8 -*-
"""aula_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13ipDkLPdghfgYsixIvgt2e3PaU6MOQ1G

## Aula 2
"""

import pandas as pd
fonte = 'https://github.com/alura-cursos/imersao-dados-2-2020/blob/master/MICRODADOS_ENEM_2019_SAMPLE_43278.csv?raw=true'
dados = pd.read_csv(fonte)

#alunos com idade menor ou igual a 14
alunos_menor_14 = dados.query('NU_IDADE <= 14')

#obtendo a proporção por estado e gerando um gráfico
alunos_menor_14['SG_UF_RESIDENCIA'].value_counts(normalize=True).plot.pie(figsize=(10,8))

#note que esse gráfico não ficou muito legível, vamos tentar outro tipo
alunos_menor_14['SG_UF_RESIDENCIA'].value_counts(normalize=True).plot.bar(figsize=(10,8))

#vamos começar a utilizar as visualizações da biblioteca Seaborn
import seaborn as sns

#fazendo uma breve análise do questionário sócio-econômico, vamos olhar a questão sobre renda

renda = dados['Q006'].unique()
renda.sort()
print(renda)

import matplotlib.pyplot as plt

plt.figure(figsize=(10,6))
sns.boxplot(x = 'Q006', y = 'NU_NOTA_MT', data = dados, order = renda)
plt.title('Boxplot das notas de matemática pela renda')

#Observamos que as notas aumentam a medida que a renda dos alunos aumenta

#esse comportamento é apenas para matemática, mas e se quisermos ver as notas de todas as provas?

#lista com todas as notas:
provas = ['NU_NOTA_REDACAO', 'NU_NOTA_LC', 'NU_NOTA_MT','NU_NOTA_CN','NU_NOTA_CH']

#soma de todas as notas de cada inscrito
dados[provas].sum(axis=1)

#adicionando esta coluna no dataframe
dados['NU_NOTA_TOTAL'] = dados[provas].sum(axis=1)

plt.figure(figsize=(10,6))
sns.boxplot(x = 'Q006', y = 'NU_NOTA_TOTAL', data = dados, order = renda)
plt.title('Boxplot das notas totais pela renda')

#fazendo um histograma:
sns.displot(dados, x = 'NU_NOTA_TOTAL')

#vamos olhar com mais atenção para os inscritos que tiraram 0
dados.query('NU_NOTA_TOTAL == 0').head()

provas.append('NU_NOTA_TOTAL')
dados[provas].query('NU_NOTA_TOTAL == 0')

dados_sem_nota_0 = dados.query('NU_NOTA_TOTAL != 0')
dados_sem_nota_0.head()

plt.figure(figsize=(10,6))
sns.boxplot(x = 'Q006', y = 'NU_NOTA_TOTAL', data = dados_sem_nota_0, order = renda)
plt.title('Boxplot das notas totais pela renda')

plt.figure(figsize=(14,8))
sns.boxplot(x = 'Q006', y = 'NU_NOTA_TOTAL', data = dados_sem_nota_0, 
            hue = 'IN_TREINEIRO', order = renda)
plt.title('Boxplot das notas totais pela renda')

"""### Desafios

Desafio 1: criar uma função para fazer esses gráficos, mudando apenas os argumentos de nota

Desafio 2: Verificar se os alunos que zeraram foram eliminados ou não compareceram

Desafio 3: Ver se quem faltou a prova fez a prova na mesma cidade que mora

Desafio 4: Verificar a quantidade de treineiros e não treineiros por renda

Desafio 5: Fazer o boxplot considerando o acesso a internet
"""

#desafio 1:

def graf_function(linha, coluna, df, titulo, **kwargs):
  plt.figure(figsize=(14,8))
  sns.boxplot(x = linha, y = coluna, data = df, **kwargs)
  plt.title(titulo)

graf_function('Q006', 'NU_NOTA_TOTAL', dados_sem_nota_0, 'Boxplot das notas totais pela renda',hue = 'IN_TREINEIRO', order = renda)

#desafio 2:

presenca = ['TP_PRESENCA_CN', 'TP_PRESENCA_LC', 'TP_PRESENCA_MT', 'TP_PRESENCA_CH']
#0: faltou
#1: presente
#2: eliminado

dados.query('NU_NOTA_TOTAL == 0')[presenca].value_counts()

#vemos que a maioria dos alunos que tiraram 0, faltou ou foi eliminada, porém alguns estavam presentes e tiraram 0

#e quem falta ou é eliminado recebe NaN
dados.query("TP_PRESENCA_CN == 0" or "TP_PRESENCA_CN == 2")["NU_NOTA_CN"]

#desafio 3: 

#candidatos que fizeram a prova em um município diferente da residência:
dados.query('NO_MUNICIPIO_RESIDENCIA != NO_MUNICIPIO_PROVA').value_counts()

#desafio 4:

#0: não treineiro
#1: treineiro

sns.set_palette('PRGn')
sns.set_style('whitegrid')
g = sns.countplot(x = 'Q006', data = dados_sem_nota_0, hue = 'IN_TREINEIRO', order = renda)
g.set_title('Quantidade de treineitos e não treineiros por renda')
g.set(xlabel='faixa de renda', ylabel='quantidade')
g.legend(['Não treineiro', 'Treineiro'])

#Desafio 5:

#Acesso a internet: não (A), sim (B)

plt.figure(figsize=(10,6))
sns.boxplot(x = 'Q025', y = 'NU_NOTA_TOTAL', data = dados_sem_nota_0)
plt.title('Notas por acesso à internet em casa')
plt.xlabel('Acesso à internet')
plt.ylabel('Nota total')

